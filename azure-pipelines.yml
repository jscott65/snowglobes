jobs:
- job: linux
  pool: {vmImage: 'Ubuntu-16.04'}
  variables:
    GLB_DIR: /usr/globes
    GLB_INCLUDE: GLB_DIR:include
    GLB_LIB: GLB_DIR:include
    GLB_BIN: GLB_DIR:bin
    CIBW_SKIP: cp27-*
    CIBW_BUILD_VERBOSITY: 3
    #CIBW_PLATFORM: 'linux'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 3

  steps:
  - bash: sudo apt-get update && sudo apt-get install -y libgsl-dev # script path or inline
    workingDirectory: $(System.DefaultWorkingDirectory) #
    displayName: download and update libgsl-dev #
    failOnStderr: false #
    #env: # mapping of environment variables to add

  - bash: curl https://www.mpi-hd.mpg.de/personalhomes/globes/download/globes-3.2.17.tar.gz | tar xvz
    workingDirectory: $(System.DefaultWorkingDirectory) #
    displayName: dowload and extract globes library #
    failOnStderr: false #
    #env: # mapping of environment variables to add

  - bash: ./configure --prefix=$(GLB_DIR)
    workingDirectory: $(System.DefaultWorkingDirectory)/globes-3.2.17 #
    displayName: configure globes library #
    failOnStderr: false #
    #env: # mapping of environment variables to add

  - bash: sudo make
    workingDirectory: $(System.DefaultWorkingDirectory)/globes-3.2.17 #
    displayName: make globes library #
    failOnStderr: false #
    #env: # mapping of environment variables to add

  - bash: sudo make install
    workingDirectory: $(System.DefaultWorkingDirectory)/globes-3.2.17 #
    displayName: install globes library #
    failOnStderr: false #
    #env: # mapping of environment variables to add

  - bash: sudo ldconfig
    workingDirectory: $(System.DefaultWorkingDirectory)/globes-3.2.17 #
    displayName: run ldconfig #
    failOnStderr: false #
    #env: # mapping of environment variables to add

  - bash: export PATH=$(GLB_BIN):$PATH
    workingDirectory: $(System.DefaultWorkingDirectory) #
    displayName: prepend GLB_BIN to PATH #
    failOnStderr: false #
    #env: # mapping of environment variables to add

  - bash: export LD_LIBRARY_PATH=$(GLB_BIN):$LD_LIBRARY_PATH
    workingDirectory: $(System.DefaultWorkingDirectory) #
    displayName: prepend GLB_BIN to LD_LIBRARY_PATH #
    failOnStderr: false #
    #env: # mapping of environment variables to add

  - task: PublishPipelineArtifact@1 # string  # reference to a task and version, e.g. "VSBuild@1"
    displayName: create globes library artifact # string  # friendly name displayed in the UI
    #name: # string  # identifier for this step (A-Z, a-z, 0-9, and underscore)
    inputs: # { string: string }  # task-specific inputs
      path: $(GLB_DIR)
      artifact: globeslib
    #env: # { string: string }  # list of environment variables to add

  # Use Python Version
  # Retrieves the specified version of Python from the tool cache. Optionally add it to PATH.
  - task: UsePythonVersion@0
    displayName: set python version # string  # friendly name displayed in the UI
    inputs:
      versionSpec: '$(python.version)' #'3.x'
      addToPath: true
      #architecture: 'x64' # Options: x86, x64 (this argument applies only on Windows agents)

  - task: DownloadPipelineArtifact@2
    displayName: download the globes artifact
    inputs:
      source: current
      artifact: globeslib
      path: '$(System.DefaultWorkingDirectory)/globes' #By default, files are downloaded to $(Pipeline.Workspace)/{artifact}

  - bash: python -m pip install --upgrade pip setuptools wheel
    workingDirectory: $(System.DefaultWorkingDirectory)
    displayName: pip install/upgrade setuptools, wheel #
    failOnStderr: false #
    #env:  # mapping of environment variables to add

  - bash: pip install cffi
    workingDirectory: $(System.DefaultWorkingDirectory) #
    displayName: pip cffi #
    failOnStderr: false #
    #env:  # mapping of environment variables to add

  - bash: pwd
    workingDirectory: $(System.DefaultWorkingDirectory) #
    displayName: pwd #
    failOnStderr: false #
    #env:  # mapping of environment variables to add
  - bash: ls
    workingDirectory: $(System.DefaultWorkingDirectory)/globes/include #
    displayName: pwd #
    failOnStderr: false #
    #env:  # mapping of environment variables to add
  - bash: pwd
    workingDirectory: $(System.DefaultWorkingDirectory)/globes/include #
    displayName: pwd #
    failOnStderr: false #
    #env:  # mapping of environment variables to add

  - bash: pip install cibuildwheel==0.11.1
    workingDirectory: $(System.DefaultWorkingDirectory) #
    displayName: pip cibuildwheel #
    failOnStderr: false #
    #env:  # mapping of environment variables to add pip install cibuildwheel==0.11.1

  - bash: cibuildwheel --output-dir wheelhouse --platform linux
    workingDirectory: $(System.DefaultWorkingDirectory) #
    displayName: run cibuildwheel with output ./wheelhouse #
    failOnStderr: false #
    #env:  # mapping of environment variables to add pip install cibuildwheel==0.11.1

  - task: PublishBuildArtifacts@1
    inputs: {pathtoPublish: 'wheelhouse'}
